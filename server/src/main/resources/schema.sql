DROP TABLE if EXISTS users, items, bookings, comments, requests CASCADE;

CREATE TABLE IF NOT EXISTS users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(512) NOT NULL,
    CONSTRAINT pk_user PRIMARY KEY (id),
    CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255) NOT NULL,
    description VARCHAR NOT NULL,
    available boolean NOT NULL,
    owner INTEGER NOT NULL,
    next_booking INTEGER,
    last_booking INTEGER,
    request_id INTEGER,
    CONSTRAINT pk_item PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS bookings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    start_time TIMESTAMP WITHOUT TIME ZONE,
    end_time TIMESTAMP WITHOUT TIME ZONE,
    item INTEGER NOT NULL,
    booker INTEGER NOT NULL,
    status VARCHAR(255) NOT NULL,
    CONSTRAINT pk_booking PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    text VARCHAR,
    item INTEGER NOT NULL,
    author_name VARCHAR(255) NOT NULL,
    created TIMESTAMP NOT NULL,
    CONSTRAINT pk_comment PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS requests (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    description VARCHAR NOT NULL,
    created TIMESTAMP WITHOUT TIME ZONE,
    owner_id INTEGER NOT NULL,
    CONSTRAINT pk_requests PRIMARY KEY (id)
);

ALTER TABLE items ADD CONSTRAINT fk_item_owner FOREIGN KEY (owner) REFERENCES users(id);
ALTER TABLE items ADD CONSTRAINT fk_item_next_booking FOREIGN KEY (next_booking) REFERENCES bookings(id);
ALTER TABLE items ADD CONSTRAINT fk_item_last_booking FOREIGN KEY (last_booking) REFERENCES bookings(id);

ALTER TABLE bookings ADD CONSTRAINT fk_booking_item FOREIGN KEY (item) REFERENCES items(id);
ALTER TABLE bookings ADD CONSTRAINT fk_booking_booker FOREIGN KEY (booker) REFERENCES users(id);

ALTER TABLE comments ADD CONSTRAINT fk_comment_item FOREIGN KEY (item) REFERENCES items(id);